pipeline {
    agent any

    environment {
        DOCKER_HUB_USERNAME = 'kubeje2'
        DOCKER_HUB_REGISTRY = 'docker.io'
        HELLO_IMAGE_NAME = "${DOCKER_HUB_USERNAME}/hello-world-app:${env.BUILD_NUMBER}"
        HAPPY_IMAGE_NAME = "${DOCKER_HUB_USERNAME}/happy-world-app:${env.BUILD_NUMBER}"
        DOCKER_HUB_CREDENTIALS_ID = 'kubeje2-docker-login'
    }

    tools {
        git 'Default'
    }

    stages {
        stage('Fetch code') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/YU88John/k8s-gitops-code-repo.git'
                }
            }
        }

        stage('Log in to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_HUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_HUB_USERNAME', passwordVariable: 'DOCKER_HUB_PASSWORD')]) {
                        sh "echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin $DOCKER_HUB_REGISTRY"
                    }
                }
            }
        }

        stage('Build and Push Hello Image') {
            steps {
                script {
                    // Build the hello_world_service Docker image
                    def dockerImageHello = docker.build(HELLO_IMAGE_NAME, "./hello_world_service/")

                    // Push the built images to Docker Hub
                    dockerImageHello.push()
                }
            }
        }

        stage('Build and Push Happy Image') {
            steps {
                script {
                    // Build the happy_world_service Docker image
                    def dockerImageHappy = docker.build(HAPPY_IMAGE_NAME, "./happy_world_service/")

                    // Push the built images to Docker Hub
                    dockerImageHappy.push()
                }
            }
        }

        stage('Clone or pull the manifests repo') {
            steps {
                script {
                    echo 'Clearing the workspace'
                    sh 'rm -rf k8s-gitops-manifests-repo'
                    sh 'rm -rf *'
                    sh 'ls -ltr'
                    echo 'Cloning the repo...'
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN_ID', variable: 'GITHUB_TOKEN')]) {
                        sh "git clone https://${GITHUB_TOKEN}@github.com/YU88John/k8s-gitops-manifests-repo.git"
                        sh 'ls -ltr'
                        sh 'cd k8s-gitops-manifests-repo'
                        sh 'git fetch origin'
                        sh 'ls -ltr'
                        sh 'git branch'
                        sh 'git branch -a'
                    }
                    sh 'ls -ltr'
                }
            }
        }

        stage('Create local branch and checkout') {
            steps {
                script {
                    sh 'git checkout origin/dev'
                    // Create a new local branch 'dev' based on the remote tracking branch
                    sh 'git checkout -b dev'
                }
            }
        }

        stage('Update manifests') {
            steps {
                dir("k8s-gitops-manifests-repo") {
                    script {
                        // Define the new image names with tags
                        def newHelloImage = "${DOCKER_HUB_USERNAME}/hello-world-app:${env.BUILD_NUMBER}"
                        def newHappyImage = "${DOCKER_HUB_USERNAME}/happy-world-app:${env.BUILD_NUMBER}"

                        sh "pwd"
                        sh "ls -la"
                        // Update the image names in the deployment files
                        sh "sed -i 's|image:.*hello-world-app.*|image: ${newHelloImage}|' manifests/deployment_hello.yaml"
                        sh "sed -i 's|image:.*happy-world-app.*|image: ${newHappyImage}|' manifests/deployment_happy.yaml"

                        // Debugging output
                        sh 'cat manifests/deployment_hello.yaml'
                        sh 'cat manifests/deployment_happy.yaml'
                    }
                }
            }
        }

        stage('Commit and push') {
            steps {
                dir("k8s-gitops-manifests-repo") {
                    script {
                        sleep 5
                        sh 'git add .'
                        sh 'git diff'

                        sh 'git branch dev origin/dev || true'
                        sh 'git checkout dev'
                        withCredentials([string(credentialsId: 'GITHUB_TOKEN_ID', variable: 'GITHUB_TOKEN')]) {
                            sh "git config --global user.email 'mtk.john88@gmail.com'"
                            sh "git remote set-url origin https://${GITHUB_TOKEN}@github.com/YU88John/k8s-gitops-manifests-repo.git"
                            sh "git commit -m \"Updated image version - Build #${env.BUILD_NUMBER}\""
                            sh 'git push -u origin dev --force'
                        }
                    }
                }
            }
        }

       stage('Create a pull request') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'GITHUB_TOKEN_ID', variable: 'GITHUB_TOKEN')]) {
                        def repositoryOwner = 'YU88John'
                        def repositoryName = 'k8s-gitops-manifests-repo'
                        def baseBranch = 'main'
                        def headBranch = 'dev'
                        def pullRequestTitle = "Updated image version - Build #${env.BUILD_NUMBER}"
                        def pullRequestBody = "Please pull these awesome changes in! Check it out! Merge em to main"

                        def apiUrl = "https://api.github.com/repos/${repositoryOwner}/${repositoryName}/pulls"
                        def payload = """{
                            "title": "${pullRequestTitle}",
                            "body": "${pullRequestBody}",
                            "head": "${repositoryOwner}:${headBranch}",
                            "base": "${baseBranch}"
                        }"""

                        sh """
                            curl -L \
                            -X POST \
                            -H 'Accept: application/vnd.github+json' \
                            -H 'Authorization: Bearer ${GITHUB_TOKEN}' \
                            -H 'X-GitHub-Api-Version: 2022-11-28' \
                            ${apiUrl} \
                            -d '${payload}'
                        """
                    }
                }
            }
        }

    }
}
